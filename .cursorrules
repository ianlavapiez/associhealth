# Cursor Rules for AssociHealth Project

## Package Manager

- Always use `pnpm` as the package manager for installing dependencies
- Use `pnpm install` instead of `npm install` or `yarn install`
- Use `pnpm add <package>` instead of `npm install <package>` or `yarn add <package>`
- Use `pnpm remove <package>` instead of `npm uninstall <package>` or `yarn remove <package>`
- Use `pnpm run <script>` instead of `npm run <script>` or `yarn <script>`

## Project Structure

- This is a monorepo using pnpm workspaces
- Apps are located in the `apps/` directory
- Shared packages are located in the `packages/` directory
- Always respect the workspace structure when adding dependencies

## Code Style

- **Props Ordering**: Always arrange component props in alphabetical order
  - Interface properties should be alphabetically ordered
  - Function parameters should be alphabetically ordered when destructuring props
  - This improves consistency and makes code easier to read and maintain
  - Example:

    ```tsx
    // ✅ Correct - alphabetical order
    interface ButtonProps {
      className?: string;
      disabled?: boolean;
      onClick?: () => void;
      variant?: "primary" | "secondary";
    }

    function Button({ className, disabled, onClick, variant }: ButtonProps) {
      // ...
    }
    ```

- **React Imports**: Always use named imports from React instead of React.\* syntax
  - Use `import { useEffect, useState } from "react"` instead of `import * as React from "react"`
  - Use `useEffect()` instead of `React.useEffect()`
  - Use `useState()` instead of `React.useState()`
  - This improves tree-shaking and makes imports more explicit
  - Example:

    ```tsx
    // ✅ Correct - named imports
    import { useEffect, useState } from "react";

    function Component() {
      const [state, setState] = useState(false);
      useEffect(() => {
        // ...
      }, []);
    }

    // ❌ Avoid - namespace import
    import * as React from "react";

    function Component() {
      const [state, setState] = React.useState(false);
      React.useEffect(() => {
        // ...
      }, []);
    }
    ```

## Commit Messages

- Always use Conventional Commits specification (https://www.conventionalcommits.org/en/v1.0.0/)
- Commit message format: `<type>[optional scope]: <description>`
- Required types:
  - `feat:` - A new feature (correlates with MINOR in SemVer)
  - `fix:` - A bug fix (correlates with PATCH in SemVer)
  - `docs:` - Documentation only changes
  - `style:` - Changes that do not affect the meaning of the code (white-space, formatting, etc.)
  - `refactor:` - A code change that neither fixes a bug nor adds a feature
  - `perf:` - A code change that improves performance
  - `test:` - Adding missing tests or correcting existing tests
  - `build:` - Changes to the build system or external dependencies
  - `ci:` - Changes to CI configuration files and scripts
  - `chore:` - Other changes that don't modify src or test files
- Optional scope: Use parentheses to indicate the area of codebase affected (e.g., `feat(ui):`, `fix(auth):`)
- Breaking changes: Use `!` after type/scope or add `BREAKING CHANGE:` footer
- Examples:
  - `feat(ui): add button component`
  - `fix(auth): resolve login validation issue`
  - `docs: update README with installation steps`
  - `feat!: redesign user dashboard layout`
  - `refactor(api): simplify user service methods`
